#!/usr/bin/env node

/**
 * Monitoring Setup Script
 * Initializes monitoring and analytics services
 */

require('dotenv').config();
const mongoose = require('mongoose');
const { MonitoringService } = require('../services/monitoringService');
const { AnalyticsService } = require('../services/analyticsService');

async function setupMonitoring() {
  try {
    console.log('üîß Configurando sistema de monitoreo...');

    // Connect to database
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/autocontrol-dev';
    await mongoose.connect(mongoUri, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    console.log('‚úÖ Conectado a la base de datos');

    // Initialize monitoring service
    console.log('üîç Iniciando servicio de monitoreo...');
    const monitoringInterval = parseInt(process.env.MONITORING_INTERVAL) || 60000;
    MonitoringService.startMonitoring(monitoringInterval);
    console.log(`‚úÖ Monitoreo iniciado (intervalo: ${monitoringInterval}ms)`);

    // Collect initial metrics
    console.log('üìä Recolectando m√©tricas iniciales...');
    await MonitoringService.collectMetrics();
    console.log('‚úÖ M√©tricas iniciales recolectadas');

    // Test analytics service
    console.log('üìà Probando servicio de an√°lisis...');
    const testEvent = {
      organizationId: new mongoose.Types.ObjectId(),
      userId: new mongoose.Types.ObjectId(),
      eventType: 'system_startup',
      data: {
        message: 'Sistema de monitoreo inicializado',
        version: process.env.APP_VERSION || '1.0.0'
      },
      metadata: {
        timestamp: new Date(),
        source: 'setup-script'
      }
    };
    
    await AnalyticsService.trackEvent(testEvent);
    console.log('‚úÖ Servicio de an√°lisis funcionando correctamente');

    // Setup cleanup job
    console.log('üßπ Configurando limpieza autom√°tica...');
    const retentionDays = parseInt(process.env.ANALYTICS_RETENTION_DAYS) || 90;
    await AnalyticsService.cleanupOldData(retentionDays);
    console.log(`‚úÖ Limpieza configurada (retenci√≥n: ${retentionDays} d√≠as)`);

    // Display configuration summary
    console.log('\nüìã Resumen de configuraci√≥n:');
    console.log(`   ‚Ä¢ Intervalo de monitoreo: ${monitoringInterval}ms`);
    console.log(`   ‚Ä¢ Retenci√≥n de an√°lisis: ${retentionDays} d√≠as`);
    console.log(`   ‚Ä¢ Retenci√≥n de m√©tricas: ${process.env.METRICS_RETENTION_DAYS || 30} d√≠as`);
    console.log(`   ‚Ä¢ Base de datos: ${mongoUri.replace(/\/\/.*@/, '//***:***@')}`);

    console.log('\nüéâ Sistema de monitoreo configurado exitosamente!');
    console.log('\nüìä Accede al dashboard en: http://localhost:5000/monitoring');
    console.log('üîë Necesitar√°s un token de autenticaci√≥n de administrador');

    // Keep the script running for a few seconds to collect some metrics
    console.log('\n‚è≥ Recolectando m√©tricas de prueba...');
    setTimeout(async () => {
      await MonitoringService.collectMetrics();
      console.log('‚úÖ M√©tricas de prueba recolectadas');
      
      // Stop monitoring and exit
      MonitoringService.stopMonitoring();
      await mongoose.connection.close();
      console.log('\n‚úÖ Configuraci√≥n completada. El monitoreo se iniciar√° autom√°ticamente con el servidor.');
      process.exit(0);
    }, 5000);

  } catch (error) {
    console.error('‚ùå Error configurando monitoreo:', error);
    process.exit(1);
  }
}

// Handle script termination
process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è  Deteniendo configuraci√≥n...');
  MonitoringService.stopMonitoring();
  await mongoose.connection.close();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n‚èπÔ∏è  Deteniendo configuraci√≥n...');
  MonitoringService.stopMonitoring();
  await mongoose.connection.close();
  process.exit(0);
});

// Run setup
setupMonitoring();