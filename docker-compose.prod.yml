version: '3.8'

services:
  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autocontrol-api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - EMAIL_API_KEY=${EMAIL_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ENABLE_COMPRESSION=true
      - ENABLE_REQUEST_LOGGING=true
      - ENABLE_METRICS_COLLECTION=true
      - HEALTH_CHECK_ENABLED=true
      - LOG_LEVEL=info
    ports:
      - "5000:5000"
    volumes:
      - api_logs:/app/logs
      - api_backups:/app/backups
      - api_uploads:/app/uploads
    networks:
      - autocontrol_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - mongodb
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.autocontrolpro.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: autocontrol-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - autocontrol_network
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`autocontrolpro.com`) || Host(`www.autocontrolpro.com`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  # MongoDB (for development/testing - use MongoDB Atlas in production)
  mongodb:
    image: mongo:6.0
    container_name: autocontrol-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=autocontrol
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - autocontrol_network
    command: mongod --auth --bind_ip_all

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: autocontrol-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - autocontrol_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Nginx reverse proxy (alternative to Traefik)
  nginx:
    image: nginx:alpine
    container_name: autocontrol-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - autocontrol_network
    depends_on:
      - api
      - frontend
    profiles:
      - nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: autocontrol-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autocontrol_network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: autocontrol-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - autocontrol_network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  api_backups:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  autocontrol_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16